// API para manejar notificaciones
import { fetchAPI } from './api';

const notificationsAPI = {
  /**
   * Obtener notificaciones de un proyecto
   */
  async getProjectNotifications(projectId) {
    try {
      console.log('üîç Obteniendo notificaciones del proyecto:', projectId);
      const response = await fetchAPI(`/api/captaciones/${projectId}/remodelacion/notificaciones`, 'GET');
      console.log('üì® Respuesta de notificaciones:', response);
      return response.data || [];
    } catch (error) {
      console.error('Error al obtener notificaciones:', error);
      throw error;
    }
  },

  /**
   * Obtener notificaciones del usuario actual
   */
  async getUserNotifications() {
    try {
      console.log('üîç Obteniendo notificaciones del usuario');
      const response = await fetchAPI('/api/captaciones/notificaciones-usuario', 'GET');
      console.log('üì® Respuesta de notificaciones del usuario:', response);
      return response.data || [];
    } catch (error) {
      console.error('Error al obtener notificaciones del usuario:', error);
      throw error;
    }
  },

  /**
   * Marcar notificaci√≥n como le√≠da
   */
  async markAsRead(notificationId) {
    try {
      console.log('üîç Marcando notificaci√≥n como le√≠da:', notificationId);
      const response = await fetchAPI(`/api/captaciones/notificacion/${notificationId}/marcar-leida-usuario`, 'PUT');
      console.log('‚úÖ Notificaci√≥n marcada como le√≠da:', response);
      return response;
    } catch (error) {
      console.error('Error al marcar notificaci√≥n como le√≠da:', error);
      throw error;
    }
  },

  /**
   * Marcar todas las notificaciones como le√≠das
   */
  async markAllAsRead() {
    try {
      console.log('üîç Marcando todas las notificaciones como le√≠das');
      // Por ahora, marcaremos individualmente ya que no hay endpoint espec√≠fico
      const notifications = await this.getUserNotifications();
      const promises = notifications
        .filter(n => !n.leida)
        .map(n => this.markAsRead(n._id));
      
      await Promise.all(promises);
      return { success: true, message: 'Todas las notificaciones marcadas como le√≠das' };
    } catch (error) {
      console.error('Error al marcar todas las notificaciones como le√≠das:', error);
      throw error;
    }
  },

  /**
   * Eliminar notificaci√≥n
   */
  async deleteNotification(notificationId) {
    try {
      console.log('üîç Eliminando notificaci√≥n:', notificationId);
      // Por ahora solo simulamos la eliminaci√≥n ya que no hay endpoint espec√≠fico
      console.log('‚ö†Ô∏è Endpoint de eliminaci√≥n no implementado, simulando eliminaci√≥n');
      return { success: true, message: 'Notificaci√≥n eliminada' };
    } catch (error) {
      console.error('Error al eliminar notificaci√≥n:', error);
      throw error;
    }
  },

  /**
   * Obtener notificaciones no le√≠das
   */
  async getUnreadNotifications() {
    try {
      console.log('üîç Obteniendo notificaciones no le√≠das');
      const response = await fetchAPI('/api/captaciones/notificaciones?leida=false', 'GET');
      console.log('üì® Respuesta de notificaciones no le√≠das:', response);
      return response.data || [];
    } catch (error) {
      console.error('Error al obtener notificaciones no le√≠das:', error);
      throw error;
    }
  }
};

export default notificationsAPI;
